apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    app: wiki
    tier: frontend
spec:
  # if your cluster supports it, uncomment the following to automatically create
  # an external load-balanced IP for the frontend service.
  # type: LoadBalancer
  type: NodePort
  ports:
    # the port that this service should serve on
  - port: 8000
    targetPort: 8000
    nodePort: 30036
  selector:
    app: wiki
    tier: frontend
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: frontend
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  # labels:
  #   app: wiki
  #   tier: frontend
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 1
  # selector can be applied automatically
  # from the labels in the pod template if not set
  # selector:
  #   matchLabels:
  #     app: wiki
  #     tier: frontend
  template:
    metadata:
      labels:
        app: wiki
        tier: frontend
    spec:
      containers:
      - name: wiki 
        image: billyzhang2010/python-pip:v1.1
        command: ['/bin/sh', '-c']
        args: ['cd demo/mywiki && simiki g  && simiki p -w  --host 0.0.0.0 --port 8000']
        #resources:
        #  requests:
        #    cpu: 100m
        #    memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access environment variables to find service host
          # info, comment out the 'value: dns' line above, and uncomment the
          # line below.
          # value: env
        ports:
        - containerPort: 8000
